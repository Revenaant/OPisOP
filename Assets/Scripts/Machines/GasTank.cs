using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GasTank : Connectable, IPush
{
    private bool _wasOn;
    [SerializeField] private bool _isOn = true;

    [Header("Pollution Generated by Per Unit of Gas")]
    [SerializeField] private float _pollutionModifier = 0.05f;


    [Header("Resource Generation")]

    [SerializeField] private float _resourceGeneration = 1.2f;
    [SerializeField, Tooltip("Per time given, or every frame if less than 0.")]
    private float _interval = -1;
    private float _timeSinceLastInterval = -1;

    [Header("Debug")]
    public UIFillBar capacityBar;
    public DisplayStats displayStats;

    public System.Action<bool> OnPowered; // On and Off

    private Animator _anime;
    [SerializeField] private Animator _anime2;

    // Use this for initialization
    void Start()
    {
        GameManager.Instance.GasTank = this;
        _energy = _capacity;
        _anime = GetComponentInChildren<Animator>();

        IsOn = false;
    }

    // Update is called once per frame
    void Update()
    {
        if (_wasOn != _isOn)
        {
            if (OnPowered != null) OnPowered.Invoke(_isOn);
            _wasOn = _isOn;

            _anime.SetBool("IsOn", _isOn);
            _anime2.SetBool("IsOn", _isOn);
        }

        GenerateResource();

        // Debug texts
        if (capacityBar != null) capacityBar.Value = _energy / _capacity;

        if (displayStats.texts.Count == 0) return;
        foreach (var text in displayStats.texts)
            if (text == null)
                return;
        displayStats.texts[0].gameObject.transform.parent.gameObject.SetActive(GameManager.Instance.DisplayDebug);

        displayStats.texts[0].text = "Storage: " + _energy;
        displayStats.texts[1].text = "Capacity: " + _capacity;
        displayStats.texts[2].text = "Pollution: " + _pollutionModifier;
    }

    private void GenerateResource()
    {
        if (IsOn && _energy > 0)
        {
            if (_interval < 0)
            {
                Push(_resourceGeneration);
            }
            else if (Time.time > _timeSinceLastInterval + _interval)
            {
                Push(_resourceGeneration);
                _timeSinceLastInterval = Time.time;
            }
        }
    }

    public void IncreasePollution(float value)
    {
        // Do something with pollution
        if (GameManager.Instance.PollutionManager != null)
            GameManager.Instance.PollutionManager.Pollution += value * _pollutionModifier;
       // print(GameManager.Instance.PollutionManager.Pollution);
    }

    public void Push(float value)
    {
        // Divide the amount between all connections
        value /= _connections.Count;

        for (int i = 0; i < _connections.Count; i++)
        {
            IPull puller = GetConnection(i) as IPull;
            if (puller != null) puller.Pull(value);
            IncreasePollution(value);
            _energy -= value;
        }
    }

    public bool IsOn
    {
        get { return _isOn; }
        set { _isOn = value; }
    }

    private void Power(bool value)
    {

    }

    public float Capacity
    {
        get { return _capacity; }
        set
        {
            _capacity = value;
        }
    }

    public float Energy
    {
        get { return _energy; }
        set
        {
            _energy = Mathf.Clamp(value, 0, Capacity);
        }
    }

    public void ToggleOnOff()
    {
        IsOn = !IsOn;
    }

    public void TogglePause()
    {
        ToggleOnOff();
    }
}
